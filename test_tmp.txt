//const a;
//const int a = 2, d = -3, a = 1;
//const int void;
//iNt i;
//char ch;
//int j, k;
//int slen, buf[100];
//chAr str[100];
//int 
//char a[1111, ccc;
//char c
//int test2, "2222", test1,
//char sss, a111], dddd;
//int arr1[], arr2[];

/*
int mod(int param){
	if(param < 10){
		if(param < 0){
			printf("param must >= 0.");
			return (-1);
		}else{
			return (param);
		}
	}else{
		return (mod(param - 10));
	}
}
*/
//int pow_n_m()
/*
int pow_n_m(int b, int e){
	int ans;
	int tmp;
	int buf[100];
    ans = 1;
	tmp = ans + 2;
	tmp = 122 + 333;
	ans = buf[20];
	{	
		buf[ans] = 3;
		tmp = ans + 2;
		tmp = 122 + 333;
		ans = buf[20];
	}
	if(ans < tmp){}else{}
	if(2 > 3){
		buf[ans] = 3;
		tmp = ans + 2;
		tmp = 122 + 333;
		ans = buf[20];
	}else{
		buf[ans] = 3;
		tmp = ans + 2 * 122 + 333;
		ans = buf[20];
	}
	while(e > 0){
		tmp = e - e/2*2;
		e = e / 2;
	}
	switch(tmp){
		case 1: ans = b * ans;
		case 0: {}
		default: {}
	}
	scanf(ans, tmp);
	printf("23333", ans);
	printf("22222");
	printf(ans + tmp);
	pow_n_m(ans, tmp);
	return (ans);
}
*/
/*
int fact(int n){
	if(n < 0) return (-1);
    else{}
	if(n == 0) return (1);
	else{}
	if(n == 1) return (1);
	else{}
	return (n*fact(n-1));
}
*/

/*
int binary_search(int v, int low, int high){}

void dist_c1_c2{
	int n, con_len;
	printf("The index of n in buf is ", binary_search(n, 0, con_len-1));
}
*/
/*
void main(){
	int n, m;
	int k;
	int tmp;
	

	printf("Input n:");
	scanf(n);
	
	
	printf("Input n, m: ");
	scanf(n, M);
	
	printf("The sum from n to m is: ", k);
	k = pow_n_m(n, m);
	PRintf("The n^m is: ", k);

}
*/

//int c;
/*
int fact(int n){
	if(n < 0) return (-1);
    else{}
	if(n == 0) return (1);
	else{}
	if(n == 1) return (1);
	else{}
	return (n*fact(n-1));
}

void main(){
	int i;
	c = 4;
	i = fact(c);
	printf("The fact is: ", i);
}
*/
/*
void main(){
	int a, i, b;
	int t;
	a = 1;
	i = 1;
	t = 0;
	while(i < 10){
		a = a * i;
		i = i + 1;
		t = t + 1 + 1 + 1 + 1 + 1;
	}
	b = a;
	i = 0;
	while(i < 100){
		b = b + i;
		i = i + 1;
		t = t + 1 + 1 + 1 + 1 + 1;
	}
	printf("a: \n", a);
	printf("b: \n", b);
	printf("t: \n", t);
}
*/
/*
int buf[100];

int binary_search(int v, int low, int high){
	int mid;
	if(low <= high){
		mid = (high + low) / 2;
		if(v == buf[mid]) return (mid);
		else{}
		if(v > buf[mid]) return (binary_search(v, mid + 1, high));
		else{}
		return (binary_search(v, low, mid - 1));
	}else{
		return (-1);
	} 
}

void main(){
	int n;
	int ans;
	scanf(n);
	printf("The square root of n is: ", binary_search(n, 0, 99));
	printf(ans);
}
void main()
{
    char _op;
    scanf(_op);
    switch(_op)
    {
        case 's':   ;
        case 'c':   ;
        case 'n':   ;

        default:
            printf("Error operation!");
    }
    
}
int b;



aaa

char fff(chAr a){
	default
	switch(a){
		case 1{a = 1}
		case : {}
		case 1 : {}

	}
	case 
	return (127)
}

void a(){
	const int a = ;
	const char c = ;
	int arr[10];
	char ddd[a];
	int n;
	int i;
	int sum;
	int n;
	char c;
	char a ;
	else
	222
	fff(i);
	printf("asaaaaaaaaaaaaaaaaaaaaaaa");
	arr[-1] = 3;
	arr[10] = 3;
	c = i  + 1 + arr[10];
	return ();
}
*/

/*
int f;

void fff{
	f = 4;
}

void main(){
	int a, b, c, d, e;
	a = 1;
	b = 1;
	c = 1;
	d = 1;
	e = 1;
	f = 1;
	c = a + b;
	printf("c expected: 2 res: ", c);
	printf("\n");
	d = a + b;
	printf("d expected: 2 res: ", d);
	printf("\n");
	e = c + d;
	printf("e expected: 4 res: ", e);
	printf("\n");
	a = a + e;
	printf("a expected: 5 res: ", a);
	printf("\n");
	e = a + b;
	a = 6;
	printf("e expected: 6 res: ", e);
	printf("\n");
	e = a + f;
	printf("e expected: 7 res: ", e);
	printf("\n");
	fff;
	e = a + f;
	printf("e expected: 10 res: ", e);
	printf("\n");
}
*/

/*
void testParameterAlooc(int a, int b, int c, int d, int e){
	int f;

	printf(a);
	printf("\n");
	printf(b);
	printf("\n");
	printf(c);
	printf("\n");
	printf(d);
	printf("\n");
	printf(e);
	printf("\n");
	f = a + b + c + d + e;
}

int fact(int a){
	int n;
	n = a;
	printf("calculating fact: ", n);
	printf("\n");
	if(n < 0) return (-1);
    else{}
	if(n == 0) return (1);
	else{}
	if(n == 1) return (1);
	else{}
	return (n*fact(n-1));
}
*/

void main()
{
    int a, b , c;

	a = b[2];
	a = a[b];
	c[c] = d;
    
}